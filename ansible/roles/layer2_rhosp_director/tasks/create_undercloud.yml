- name: create undercloud.conf
  template: src=undercloud.conf.j2 dest=~/undercloud.conf mode=0644
  become: yes
  become_user: "{{ rhosp_stack_user }}"
  register: undercloud_conf
- name: install undercloud (you can grab a coffee now, this takes a while)
  command: openstack undercloud install
  become: yes
  become_user: "{{ rhosp_stack_user }}"
  when: undercloud_conf.changed

# tweak timeouts
- name: read nova_rpc_response_timeout
  command: openstack-config --get /etc/nova/nova.conf DEFAULT rpc_response_timeout
  register: nova_rpc_response_timeout
  changed_when: False
- name: read ironic_rpc_response_timeout
  command: openstack-config --get /etc/ironic/ironic.conf DEFAULT rpc_response_timeout
  register: ironic_rpc_response_timeout
  changed_when: False
- name: adapt nova_rpc_response_timeout
  command: openstack-config --set /etc/nova/nova.conf DEFAULT rpc_response_timeout {{ nova_rpc_timeout }}
  when: nova_rpc_response_timeout.stdout | int != nova_rpc_timeout
- name: adapt ironic_rpc_response_timeout
  command: openstack-config --set /etc/ironic/ironic.conf DEFAULT rpc_response_timeout {{ ironic_rpc_timeout }}
  when: ironic_rpc_response_timeout.stdout | int != ironic_rpc_timeout
- name: restart nova
  command: openstack-service restart nova
  when: nova_rpc_response_timeout.stdout | int != nova_rpc_timeout
- name: restart ironic
  command: openstack-service restart ironic
  when: ironic_rpc_response_timeout.stdout | int != ironic_rpc_timeout

# install bootif fix - see https://bugzilla.redhat.com/show_bug.cgi?id=1234601
- name: create bootif-fix command
  copy: src=../templates/bootif-fix dest=/usr/bin/bootif-fix mode=0755
- name: create bootif-fix service
  copy: src=../templates/bootif-fix.service dest=/usr/lib/systemd/system/bootif-fix.service mode=0644
- name: (re)start bootif-fix
  service: name=bootif-fix state=restarted
- name: enable bootif-fix
  service: name=bootif-fix enabled=yes

#configure DNS for provisioning Network
- name: determine network UUID
  shell: . ~/stackrc && neutron subnet-list -f csv -F id --quote none | grep -v id
  changed_when: false
  register: neutron_uuid
  become: yes
  become_user: "{{ rhosp_stack_user }}"
- name: configure DNS for provisioning network
  shell: . ~/stackrc && neutron subnet-update "{{ neutron_uuid.stdout }}" --dns-nameserver {{ infrastructure_network_services.host_prefix | ipaddr('address') }}
  become: yes
  become_user: "{{ rhosp_stack_user }}"
