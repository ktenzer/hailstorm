
- block:
    # - name: create resolv.conf
    #   template: src=resolv.conf.j2 dest=/etc/resolv.conf mode=0644


    # find all /etc/sysconfig/network-scripts/ifcfg-* files
    # for each file -> check if line starting with DNS1= exists
    # for each file -> check if the line starting with DNS2= exists
    # if DNS1 exists but no DNS2, ensure that DNS1 points to nameserver and DNS2 points to the previous DNS1 record
    # if DNS1 exists and DNS2, ensure that DNS1 points to the nameserver, leave DNS2 unchanged
    # if DNS2 exists but no DNS1, do nothing
    # if DNS2 does not exists and no DNS1, do nothing

    - name: find all /etc/sysconfig/network-scripts/ifcfg-* files
      find: path=/etc/sysconfig/network-scripts/ pattern=ifcfg-*
      register: ifcfgscripts

    - name: for each file -> check if line starting with DNS1= or DNS2= exists
      shell: grep -e "^DNS1=" -e "^DNS2=" "{{ item.path }}" || true
      changed_when: false
      register: dns_lines
      with_items: "{% if ifcfgscripts.files is defined %}{{ ifcfgscripts.files }}{% endif %}"
      when: not ifcfgscripts|skipped

    - name: if DNS1 exists but no DNS2, ensure that DNS1 points to nameserver and DNS2 points to the previous DNS1 record (DNS1 line)
      lineinfile: state=present regexp="^DNS1=" line="DNS1={{ nameserver }}" dest="{{ item.item.path }}"
      when: item.stdout_lines|length == 1 and item.stdout.startswith('DNS1')
      with_items: "{{ dns_lines.results }}"
      register: dns1

    - name: if DNS1 exists but no DNS2, ensure that DNS1 points to nameserver and DNS2 points to the previous DNS1 record (DNS2 line)
      lineinfile: state=present insertafter="^DNS1=" line="DNS2={{ item.stdout | regex_replace('(DNS1=)(.*)', '\\2') }}" dest="{{ item.item.path }}"
      when: item.stdout_lines|length == 1 and item.stdout.startswith('DNS1')
      with_items: "{{dns_lines.results}}"
      register: dns2

    - name: if DNS1 exists and DNS2, ensure that DNS1 points to the nameserver, leave DNS2 unchanged
      lineinfile: state=present regexp="^DNS1=" line="DNS1={{ nameserver }}" dest="{{ item.item.path }}"
      when: item.stdout_lines|length == 2
      with_items: "{{dns_lines.results}}"
      register: dns3

    - name: restart network
      #command: perl -e 'my $exit_code = system("service network restart"); sleep 3; $exit_code = $exit_code >> 8; exit($exit_code);'
      service: state=restarted name=network
      when: dns1|changed or dns2|changed or dns3|changed

  when: mode == "create"

- block:
    - name: find all /etc/sysconfig/network-scripts/ifcfg-* files
      find: path=/etc/sysconfig/network-scripts/ pattern=ifcfg-*
      register: ifcfgscripts
    - name: for each file -> check if line starting with DNS1= or DNS2= exists
      shell: grep -e "^DNS1=" -e "^DNS2=" "{{ item.path }}" || true
      changed_when: false
      register: dns_lines
      with_items: "{% if ifcfgscripts.files is defined %}{{ ifcfgscripts.files }}{% endif %}"
    - name: if DNS1 exists and DNS2, ensure that DNS1 points to  DNS2, remove DNS2 (DNS1 line)
      lineinfile: state=present regexp="^DNS1=" line="DNS1={{ item.stdout | regex_replace('.*(DNS2=)(.*)$.*', '\\2') }}" dest="{{ item.item.path }}"
      when: item.stdout_lines|length == 2
      with_items: "{{ dns_lines.results }}"
      register: dns1
    - name: if DNS1 exists and DNS2, ensure that DNS1 points to  DNS2, remove DNS2 (DNS2 line)
      lineinfile: state=absent regexp="^DNS2=" dest="{{ item.item.path }}"
      when: item.stdout_lines|length == 2
      with_items: "{{ dns_lines.results }}"
      register: dns2

    - name: restart network
      service: state=restarted name=network
      when: dns1|changed or dns2|changed
  when: mode == "destroy"
